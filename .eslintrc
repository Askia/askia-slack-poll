{
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "modules": true,
      "experimentalObjectRestSpread": true,
      "jsx": true
    }
  },
  "env": {
    "es6": true,
    "node": true
  },
  "globals": {
    "WorkerGlobalScope": true
  },
  "rules": {
    /* Possible Errors */
    // disallow assignment in conditional expressions
    "no-cond-assign": 2,
    // disallow use of console
    "no-console": 0,
    // disallow use of constant expressions in conditions
    "no-constant-condition": 2,
    // disallow control characters in regular expressions
    "no-control-regex": 2,
    // disallow use of debugger
    "no-debugger": 2,
    // disallow duplicate arguments in functions
    "no-dupe-args": 2,
    // disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,
    // disallow a duplicate case label.
    "no-duplicate-case": 2,
    // disallow the use of empty character classes in regular expressions
    "no-empty-character-class": 2,
    // disallow empty statements
    "no-empty": 2,
    // disallow assigning to the exception in a catch block
    "no-ex-assign": 2,
    // disallow double-negation boolean casts in a boolean context
    "no-extra-boolean-cast": 2,
    // disallow unnecessary parentheses
    "no-extra-parens": 0,
    // disallow unnecessary semicolons
    "no-extra-semi": 2,
    // disallow overwriting functions written as function declarations
    "no-func-assign": 2,
    // disallow function or variable declarations in nested blocks
    "no-inner-declarations": [2, "functions"],
    // disallow invalid regular expression strings in the RegExp constructor
    "no-invalid-regexp": 2,
    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": 2,
    // disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 2,
    // disallow the use of object properties of the global object
    // (Math and JSON) as functions
    "no-obj-calls": 2,
    // disallow multiple spaces in a regular expression literal
    "no-regex-spaces": 2,
    // disallow sparse arrays
    "no-sparse-arrays": 2,
    // disallow template literal placeholder syntax in regular strings
    "no-template-curly-in-string": 2,
    // Avoid code that looks like two expressions but is actually one
    "no-unexpected-multiline": 0,
    // disallow unreachable statements after a return, throw, continue,
    // or break statement
    //"no-unreachable": 2,
    // disallow control flow statements in finally blocks
    "no-unsafe-finally": 2,
    // disallow negating the left operand of relational operators
    "no-unsafe-negation": 2,
    // disallow comparisons with the value NaN
    "use-isnan": 2,
    // ensure JSDoc comments are valid
    "valid-jsdoc": 0,
    // ensure that the results of typeof are compared against a valid string
    "valid-typeof": 2,

    /* Best Practices */
    // Enforces getter/setter pairs in objects
    "accessor-pairs": 0,
    // treat var statements as if they were block scoped
    "block-scoped-var": 0,
    // specify the maximum cyclomatic complexity allowed in a program
    "complexity": [0, 11],
    // require return statements to either always or never specify values
    "consistent-return": 0,
    // specify curly brace conventions for all control statements
    "curly": [0, "all"],
    // require default case in switch statements
    "default-case": 0,
    // encourages use of dot notation whenever possible
    "dot-notation": [
      0,
      {
        "allowKeywords": true
      }
    ],
    // enforces consistent newlines before or after dots
    "dot-location": [
      "error",
      "property"
    ],
    // require the use of === and !==
    "eqeqeq": 0,
    // make sure for-in loops have an if statement
    "guard-for-in": 0,
    // disallow the use of alert, confirm, and prompt
    "no-alert": 0,
    // disallow use of arguments.caller or arguments.callee
    "no-caller": 0,
    // disallow division operators explicitly at beginning
    // of regular expression
    "no-div-regex": 0,
    // disallow else after a return in an if
    "no-else-return": 0,
    // disallow comparisons to null without a type-checking operator
    "no-eq-null": 0,
    // disallow use of eval()
    "no-eval": 0,
    // disallow adding to native types
    "no-extend-native": 0,
    // disallow unnecessary function binding
    "no-extra-bind": 0,
    // disallow fallthrough of case statements
    "no-fallthrough": 2,
    // disallow the use of leading or trailing decimal points in numeric
    // literals
    "no-floating-decimal": 0,
    // disallow the type conversions with shorter notations
    "no-implicit-coercion": 0,
    // disallow use of eval()-like methods
    "no-implied-eval": 0,
    // disallow this keywords outside of classes or class-like objects
    "no-invalid-this": 0,
    // disallow usage of __iterator__ property
    "no-iterator": 0,
    // disallow use of labeled statements
    "no-labels": 0,
    // disallow unnecessary nested blocks
    "no-lone-blocks": 0,
    // disallow creation of functions within loops
    "no-loop-func": 0,
    // disallow use of multiple spaces
    "no-multi-spaces": 0,
    // disallow use of multiline strings
    "no-multi-str": 0,
    // disallow reassignments of native objects
    "no-native-reassign": 0,
    // disallow use of new operator when not part of the assignment
    // or comparison
    "no-new": 0,
    // disallow use of new operator for Function object
    "no-new-func": 0,
    // disallows creating new instances of String,Number, and Boolean
    "no-new-wrappers": 0,
    // disallow use of (old style) octal literals
    "no-octal": 2,
    // disallow use of octal escape sequences in string literals, such as
    // var foo = "Copyright \251";
    "no-octal-escape": 0,
    // disallow reassignment of function parameters
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    // disallow usage of __proto__ property
    "no-proto": 0,
    // disallow declaring the same variable more then once
    "no-redeclare": 2,
    // disallow use of assignment in return statement
    "no-return-assign": 0,
    // disallow use of `javascript:` urls.
    "no-script-url": 0,
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": 0,
    // disallow use of comma operator
    "no-sequences": 0,
    // restrict what can be thrown as an exception
    "no-throw-literal": 0,
    // disallow usage of expressions in statement position
    "no-unused-expressions": 0,
    // disallow unnecessary .call() and .apply()
    "no-useless-call": 0,
    // disallow unnecessary concatenation of literals or template literals
    "no-useless-concat": 0,
    // disallow use of void operator
    "no-void": 0,
    // disallow usage of configurable warning terms in comments: e.g. xxx
    "no-warning-comments": [0,
      {
        "terms": [
          "todo",
          "fixme",
          "xxx"
        ],
        "location": "start"
      }
    ],
    // disallow use of the with statement
    "no-with": 0,
    // require use of the second argument for parseInt()
    "radix": 0,
    // requires to declare all vars on top of their containing scope
    "vars-on-top": 0,
    // require immediate function invocation to be wrapped in parentheses
    "wrap-iife": 0,
    // require or disallow Yoda conditions
    "yoda": [0, "never"],

    /* Strict Mode */
    // require that all functions are run in strict mode
    "strict": 0,

    /* Variables */
    // enforce or disallow variable initializations at definition
    "init-declarations": 0,
    // disallow the catch clause parameter name being the same
    // as a variable in the outer scope
    "no-catch-shadow": 0,
    // disallow deletion of variables
    "no-delete-var": 2,
    // disallow labels that share a name with a variable
    "no-label-var": 0,
    // disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,
    // disallow declaration of variables already declared
    // in the outer scope
    "no-shadow": 0,
    // disallow use of undefined when initializing variables
    "no-undef-init": 0,
    // disallow use of undeclared variables unless mentioned
    // in a /*global */ block
    "no-undef": 2,
    // disallow use of undefined variable
    "no-undefined": 0,
    // disallow declaration of variables that are not used in the code
    "no-unused-vars": [
      2,
      {
        "vars": "all",
        "args": "after-used",
        "argsIgnorePattern": "_$"
      }
    ],
    // disallow use of variables before they are defined
    "no-use-before-define": 0,

    /* Node.js and CommonJS */
    // require return statements after callbacks
    "callback-return": 0,
    // require require() calls to be placed at top-level module scope
    "global-require": 0,
    // require error handling in callbacks
    "handle-callback-err": 0,
    // disallow require calls to be mixed with regular variable declarations
    "no-mixed-requires": 0,
    // disallow new operators with calls to require
    "no-new-require": 0,
    // disallow string concatenation with __dirname and __filename
    "no-path-concat": 0,
    // disallow the use of process.env
    "no-process-env": 0,
    // disallow the use of process.exit()
    "no-process-exit": 0,
    // disallow specified modules when loaded by require
    "no-restricted-modules": 0,
    // disallow synchronous methods
    "no-sync": 0,

    /* Stylistic Issues */
    // enforce spacing inside array brackets
    "array-bracket-spacing": [2, "never"],
    // disallow or enforce spaces inside of single line blocks
    "block-spacing": [2, "always"],
    // enforce one true brace style
    "brace-style": [2, "stroustrup"],
    // require camel case names
    "camelcase": 2,
    // disallow trailing commas in object literals
    "comma-dangle": [2, "never"],
    // enforce spacing before and after comma
    "comma-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    // enforce one true comma style
    "comma-style": [2, "last"],
    // require or disallow padding inside computed properties
    "computed-property-spacing": [2, "never"],
    // enforces consistent naming when capturing the current
    // execution context
    "consistent-this": 0,
    // enforce newline at the end of file, with no multiple empty lines
    "eol-last": 2,
    // require or disallow spacing between function identifiers
    // and their invocations
    "func-call-spacing": [
      2,
      "never"
    ],
    // require function names to match the name of the variable
    // or property to which they are assigned
    "func-name-matching": 2,
    // require function expressions to have a name
    "func-names": 0,
    // enforces use of function declarations or expressions
    "func-style": [
      2,
      "declaration",
      {
        "allowArrowFunctions": true
      }
    ],
    // disallow specified identifiers
    "id-blacklist": 0,
    // this option enforces minimum and maximum identifier lengths
    // (variable names, property names etc.)
    "id-length": 0,
    // require identifiers to match the provided regular expression
    "id-match": 0,
    // this option sets a specific tab width for your code
    "indent": [
      2,
      2,
      {
        "SwitchCase": 1,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "body": 1,
          "parameters": 1
        },
        "FunctionExpression": {
          "body": 1,
          "parameters": 0
        },
        "CallExpression": {
          "arguments": "first"
        },
        "flatTernaryExpressions": true
      }
    ],
    // specify whether double or single quotes should be used
    // in JSX attributes
    "jsx-quotes": [2, "prefer-double"],
    // enforces spacing between keys and values in object literal properties
    "key-spacing": [
      2,
      {
        "mode": "strict",
        "beforeColon": false,
        "afterColon": true,
        "align": "colon"
      }
    ],
    // enforce consistent spacing before and after keywords
    "keyword-spacing": [
      2,
      {
        "before": true,
        "after": true
      }
    ],
    "line-comment-position": 2,
    // disallow mixed "LF" and "CRLF" as linebreaks
    "linebreak-style": [2, "unix"],
    // enforces empty lines around comments
    "lines-around-comment": 0,
    // specify the maximum depth that blocks can be nested
    "max-depth": 0,
    // specify the maximum length of a line in your program
    "max-len": [2, 80, 2],
    // specify the maximum depth callbacks can be nested
    "max-nested-callbacks": [0, 2],
    // limits the number of parameters that can be used
    // in the function declaration
    "max-params": 0,
    //  specify the maximum number of statement allowed in a function
    "max-statements": 0,
    // require a capital letter for constructors
    "new-cap": 0,
    // disallow the omission of parentheses when invoking a constructor
    // with no arguments
    "new-parens": 2,
    // allow/disallow an empty newline after var statement
    "newline-after-var": [2, "always"],
    // disallow use of the Array constructor
    "no-array-constructor": 2,
    // disallow use of the continue statement
    "no-continue": 0,
    // disallow comments inline after code
    "no-inline-comments": 0,
    // disallow if as the only statement in an else block
    "no-lonely-if": 0,
    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,
    // disallow multiple empty lines
    "no-multiple-empty-lines": [2, {"max": 2}],
    // disallow nested ternary expressions
    "no-nested-ternary": 0,
    // disallow use of the Object constructor
    "no-new-object": 0,
    // disallow use of certain syntax in code
    "no-restricted-syntax": 0,
    // disallow space between function identifier and application
    "no-spaced-func": 0,
    // disallow the use of ternary operators
    "no-ternary": 0,
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": 2,
    // disallow dangling underscores in identifiers
    "no-underscore-dangle": 0,
    // disallow the use of Boolean literals in conditional expressions
    "no-unneeded-ternary": 2,
    // require or disallow padding inside curly braces
    "object-curly-spacing": [2, "never"],
    // allow just one var statement per function
    "one-var": [2, "never"],
    // require assignment operator shorthand where possible
    // or prohibit it entirely
    "operator-assignment": [0, "always"],
    // enforce operators to be placed before or after line breaks
    "operator-linebreak": [
      2,
      "after",
      {
        "overrides": {
          "|>": "before",
          "?": "before",
          ":": "before"
        }
      }
    ],
    // enforce padding within blocks
    "padded-blocks": [2, "never"],
    // require quotes around object literal property names
    "quote-props": 0,
    // specify whether double or single quotes should be used
    "quotes": [0, "single"],
    // require JSDoc comment
    "require-jsdoc": 2,
    // enforce spacing before and after semicolons
    "semi-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    // require or disallow use of semicolons instead of ASI
    "semi": 2,
    // sort variables within the same declaration block
    "sort-vars": 0,
    // require or disallow space before blocks
    "space-before-blocks": [2, "always"],
    // require or disallow space before function opening parenthesis
    "space-before-function-paren": [0, "always"],
    // require or disallow spaces inside parentheses
    "space-in-parens": [0, "never"],
    // require spaces around operators
    "space-infix-ops": [
      2,
      {
        "int32Hint": false
      }
    ],
    // Require or disallow spaces before/after unary operators
    "space-unary-ops": [
      0,
      {
        "words": true,
        "nonwords": false
      }
    ],
    // require or disallow a space immediately following the // or /*
    // in a comment
    "spaced-comment": [
      2,
      "always",
      {
        "exceptions": [
          "!",
          "<debug>",
          "</debug>",
          "noinspection"
        ]
      }
    ],
    // require regex literals to be wrapped in parentheses
    "wrap-regex": 0,

    /* ECMAScript 2015+ */
    // require braces in arrow function body
    "arrow-body-style": 0,
    // require parens in arrow function arguments
    "arrow-parens": [2, "as-needed"],
    // require space before/after arrow function's arrow
    "arrow-spacing": [
      2,
      {
        "before": true,
        "after": true
      }
    ],
    // verify super() callings in constructors
    "constructor-super": 2,
    // enforce the spacing around the * in generator functions
    "generator-star-spacing": [
      2,
      {
        "before": true,
        "after": false
      }
    ],
    // disallow modifying variables of class declarations
    "no-class-assign": 2,
    // disallow modifying variables that are declared using const
    "no-const-assign": 2,
    // disallow duplicate name in class members
    "no-dupe-class-members": 2,
    // disallow duplicate module imports
    "no-duplicate-imports": 2,
    // disallow new operators with the Symbol object
    "no-new-symbol": 2,
    // disallow specified modules when loaded by import
    "no-restricted-imports": 0,
    // disallow this/super before calling super() in constructors
    "no-this-before-super": 0,
    // disallow unnecessary computed property keys in object literals
    "no-useless-computed-key": 2,
    // disallow unnecessary constructors
    "no-useless-constructor": 2,
    // require let or const instead of var
    "no-var": 2,
    // require method and property shorthand syntax for object literals
    "object-shorthand": 0,
    // suggest using arrow functions as callbacks
    "prefer-arrow-callback": 2,
    // suggest using of const declaration for variables that are never
    // modified after declared
    "prefer-const": 2,
    // suggest using Reflect methods where applicable
    "prefer-reflect": 0,
    // suggest using the spread operator instead of .apply()
    "prefer-spread": 2,
    // suggest using template literals instead of strings concatenation
    "prefer-template": 2,
    // disallow generator functions that do not have yield
    "require-yield": 2
  }
}
